
    이번 주 목표 : 
     - session을 사용자 인증
     - multer middle 웨어를 이용한 파일 업로드 구현
     - fetch를 이용한 비동기 데이터 통신
0718
    /account
        회원가입 : GET /signup POST /singup  (/account 라우터에서 처리)
        (id,pw,name,email,contact,birth{year,month,day})
            > id 중첩확인 : /session

        로그인 인증 : GET /singin POST /signin (/account 라우터에서 처리)
        {id,pw}     ==> POST 일 때 유효한 사용자일 때는 인증처리

    /user
        마이페이지 : GET /user (/user 라우터에서 처리)
        ???
            /user 라우터는 인증받은 사용자만 올 수 있게 라우터에서 미들웨어 설정.

    +@ DB 작업을 위한 데이터 모듈 작성. (콜렉션 accounts)


0719
    /user
        마이페이지에서 문서작성. 및 작성한거 보기.
            - 파일 첨부. 이미지 첨부도 가능하게. 그걸 보게한다던가 다운로드를

        프로필 이미지 변경 / (업로드를 이용해서)
            - 사용자 정보를 담고 있는 문서에 update : $set profile = 

0720
    (트위터 참고)
    상단에는 글쓰는 공간.
    아래에는 최신 데이터들 나열.
     콜렉션 articles를 사용하자.
     문서 형태는 {"writerName" : user.name , "writerId" : user.id , "writerImage" : user.image ,
                  "post" : textarea(/home 에서 작성한거), "createdAt" : Date.now() , 
                  "attaches" : multer.array (req.files~~~), "comments" : [] }
            만약 멀티플 업로드를 했다면 attaches 배열이다.


    /article
        GET /home
        1 위에는 글쓰기 폼, 아래 쪽에는 최신 목록 함께 출력
        2 목록 출력을 해줄 때에는 comments.length를 출력하여 댓글들 갯수 보여지게.
        3 개별 article마다 <a href = "/article/view?articledId<%=elm._id.toString()"%>을 하게해서 그 문서 상세보기 페이지를 만들꺼다.

         - 글쓰기 폼 요구사항.
            : 공개 비공개 (input type = "radio") or (input type ="checkbox")
              아래 쪽 글을 쓸 수 있는 공간이 있어야한다. (textarea)
              이미지를 다중 첨부할 수 있어야한다. (input type = "file" multiple)
               +업로드 전에 미리보기 구현해봐도 좋을듯..... files 배열이라서 생각 좀 해봐... (구현을 해놨느데 좀 수정해야함.)
                                                    multer.array
            : 사용한 name -> 1. public   2. comment  3. attaches
            render -> post(게시글출력용)

        POST /upload
        업로드 처리할 것 하고  redirect("/article/home")
                 
        GET  /detail
        query로 넘어온 article의 ID값에 해당하는 문서 상세보기를 만들면 된다.
        거기에서 댓글을 달게 만들예정.


0721
    데이터를 화면에 뿌려줄 때, 필터링이 필요함.
    .public === "public" 이거나 혹은 writerId == req.session.user.id(=나는 user.id로 되있음)
    이라는 조건을 통해 전체 게시글 중에 로그인계정이 작성한 글은 무조건 보여지게 한다. (비공개라는거 알려주기!)

(수정)/account
        /singup
            이미 사용 중인 아이디입니다를 AJAX를 이용해서 나타내게 하자.

    /article
        /detail
         상세보기에서 덧글 다는걸 AJAX로 표현하게 하자.
            /api/comment
             코멘트에.. [{cmtID : user.id, cmtName : user.name, cmtImage : user.image,
                         comment : comment, createdAt : Date.now() },]

    